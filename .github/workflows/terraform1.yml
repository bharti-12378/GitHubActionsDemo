name: 'Terraform CI/CD'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  TF_ROOT: "./"  # Adjust if Terraform files are in a subdirectory
  AWS_REGION: "us-east-1"

jobs:
  fmt:
    name: Terraform Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest 

      - name: Terraform Format Check
        run: terraform fmt -check

  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: fmt
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest 

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest 

      - name: Restore Terraform Cache
        uses: actions/cache@v3
        with:
          path: .terraform/
          key: terraform-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            terraform-${{ github.ref }}-

      - name: Terraform Init
        run: terraform init

      - name: Decode Terraform Secrets
        run: echo ${{ secrets.BASE64_ENCODED_TFVARS }} | base64 --decode > secrets.tfvars

      - name: Terraform Plan
        run: terraform plan -var-file=./secrets.tfvars -out=tfplan

      - name: Upload Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

  apply:
    name: Terraform Apply (Manual)
    runs-on: ubuntu-latest
    needs: plan
    environment: production  # Requires manual approval in GitHub Environments
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest 

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

# Uncomment this block to allow manual Terraform destruction (same as GitLab)
# destroy:
#   name: Terraform Destroy (Manual)
#   runs-on: ubuntu-latest
#   needs: apply
#   environment: production
#   steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: latest
#
#     - name: Terraform Destroy
#       run: terraform destroy -auto-approve
